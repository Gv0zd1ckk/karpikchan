import engine as e
from random import choice
import datetime

schedule={
    0:"<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>\n1. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 56/36 \n\n2. –£–∫—Ä.–º–æ–≤–∞ 56\n\n3. –ê–°–î 42\n\n4. –°–æ—Ü.–º–µ—Ä–µ–∂i 43",
    1:"<b>–í—Ç–æ—Ä–Ω–∏–∫:</b>\n1. –î–∏—Å–∫—Ä–µ—Ç–∫–∞ 33 \n\n2. –û–ø–µ—Ä.—Å–∏—Å—Ç–µ–º—ã 33\n\n3. –ö–ì (–ö–∞—Ä–ø—É—Å—å) 43",
    2:"<b>–°—Ä–µ–¥–∞:</b>\n1. –û–û–ü 65\n(–ø–µ—Ä—à–∞ –ø–∞—Ä–∞ –õ—ã—Å—è–∫, everything is fucked)\n\n2. –ê–°–î 42\n\n3. –§–µ–∑—Ä–∞ –°/–ó",
    3:"<b>–ß–µ—Ç–≤–µ—Ä–≥:</b>\n1. –û–ø–µ—Ä.—Å–∏—Å—Ç–µ–º—ã 33 \n\n2. –û–û–ü 42\n\n3. –§–µ–∑—Ä–∞ –°/–ó",
    4:"<b>–ü—è—Ç–Ω–∏—Ü–∞:</b>\n1. –ê–°–î 42/–û–ø–µ—Ä.—Å–∏—Å—Ç–µ–º—ã 33\n\n2. –ö–ì (–ö–∞—Ä–ø—É—Å—å) 43\n\n3. –î–∏—Å–∫—Ä–µ—Ç–∫–∞ 33",
    5:"<b>–ü–ò–ô –ì–û–†I–õ–ö–£, –°–ï–ì–û–î–ù–Ø –í–´–•–û–î–ù–û–ô</b>\n(—Å—É–±–±–æ—Ç–∞)",
    6:"<b>–ü–ò–ô –ì–û–†I–õ–ö–£, –°–ï–ì–û–î–ù–Ø –í–´–•–û–î–ù–û–ô</b>\n(–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"
}

schedule_markup = {"inline_keyboard":
                      [[{"text": "–ü–Ω", "callback_data": "0"},
                        {"text": "–í—Ç", "callback_data": "1"},
                        {"text": "–°—Ä", "callback_data": "2"},
                        {"text": "–ß—Ç", "callback_data": "3"},
                        {"text": "–ü—Ç", "callback_data": "4"}]]
            , "resize_keyboard": True}

people_list = {
    'people1': """
1.–ê–Ω–¥—Ä—é—â–µ–Ω–∫–æ –ú–∏—Ö–∞–π–ª–æ –ê–Ω–¥—Äi–π–æ–≤–∏—á
2.–ë–µ–π –†—É—Å–ª–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
3.–í—Éci–∫ –û–ª–µ–≥ –Æ—Äi–π–æ–≤–∏—á
4.–ì–æ—Ä–¥i–µ–Ω–∫–æ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –†–æ–º–∞–Ωi–≤–Ω–∞
5.–î—Ä—É–∂–∏–Ωi–Ω–∞ –ú–∞—Äi—è –û–ª–µ–∫—Å–∞–Ω–¥—Äi–≤–Ω–∞
6.–ó—é–±i–Ω I–≤–∞–Ω –û–ª–µ–∫—Åi–π–æ–≤–∏—á
7.I–≤–∞–Ω–æ–≤ –ê—Ä—Ç–µ–º –í–ª–∞–¥–∏—Å–ª–∞–≤–æ–≤–∏—á
8.–ö–æ–Ω–¥—Ä–∞—Ç—å–µ–≤ –ê–Ω—Ç–æ–Ω –ê–Ω–¥—Äi–π–æ–≤–∏—á
9.–ö—É—Ä–∞—à–æ–≤ –ï–≤–≥–µ–Ωi–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
10.–õ–µ—â–µ–Ω–∫–æ –ê–Ω–¥—Ä—é—Ö–∞ –°–µ—Ä–≥i–π–æ–≤–∏—á
11.–ú–∞–∫—Å–∏–º–µ–Ω–∫–æ–≤ –û–ª–µ–∫—Åi–π –Æ—Äi–π–æ–≤–∏—á
12.–ú–µ–ª—å—Ç—é—Ö–æ–≤ –ë–æ–≥–¥–∞–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á
""",
    'people2': """
13.–û—Ä–ª–æ–≤ –ú–∏–∫–∏—Ç–∞ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á
14.–ü–µ–ª—é—à–æ–∫ –ë–æ–≥–¥–∞–Ω –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á
15.–ü–æ–≥–æ—Ä–µ–Ω–∫–æ –ù–∞—Ç–∞–ªi—è –°–µ—Ä–≥ii–≤–Ω–∞
16.–ü–æ–ª—Ç–æ—Ä–∞—Ü—å–∫–∞ –ê–Ω–Ω–∞ –ì–µ–Ω–Ω–∞–¥ii–≤–Ω–∞
17.–†–∏–∂–∫–æ–≤ –ö–∏—Ä–∏–ª–æ –ü–∞–≤–ª–æ–≤–∏—á
18.–†–æ–∑–¥–∞–π–≤–∞–π—Ñ–∞–π –û–ª–µ–≥ –Æ—Äi–π–æ–≤–∏—á
19.–°–∫—Ä–∏—Ç I—Ä–∏–Ω–∞ –ü–µ—Ç—Äi–≤–Ω–∞
20.–•–º–µ–ª–µ–≤—Å—å–∫–∏–π –ï–≤–≥–µ–Ωi–π –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á
21.–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π –î–∞–Ω–∏i–ª –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
22.–•–æ–º–µ–Ω–∫–æ I–ª–ª—è –°–µ—Ä–≥i–π–æ–≤–∏—á
23.–ß–∞–π–∫i–Ω –íi–∫—Ç–æ—Ä –í–ª–∞–¥–∏—Å–ª–∞–≤–æ–≤–∏—á
"""
}

people_list_markup = {"inline_keyboard":
                      [[{"text": "<<", "callback_data": "people1"},
                        {"text": ">>", "callback_data": "people2"}]]
            , "resize_keyboard": True}

def message_handler(query):
    """
    {'last_name': 'üçÄ', 'chat_id': 239062390, 'first_name': 'orlow', 'username': 'orlow', 'text': '3'}
    
    markup_usage    
    markup = {"inline_keyboard":
                      [[{"text":"–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", "callback_data":"horizontally"},
                        {"text":"–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ", "callback_data":"vertically"}]]
            ,"resize_keyboard":True}
    
    """

    text = query["text"]
    chat_id = query["chat_id"]

    if '@' in text:
        res = text.find('@')
        text = text[:res]

    if text == "/start":
        e.sendMessage(chat_id,"._.")

    elif text == "/s":
        weekday = datetime.datetime.now().weekday()
        try:
            weekday = int(text[2:])
        except Exception:
            pass
        markup = schedule_markup
        e.sendMessage(chat_id,schedule[weekday],reply_markup=markup)

    elif text == "/l":
        e.sendMessage(chat_id,people_list['people1'],reply_markup=people_list_markup)


    elif text == "/danil":
        e.sendMessage(chat_id,"<b>–î–ï–ë–ò–õ!!!</b>")

    elif text == "/hello":
        e.sendMessage(chat_id,"–ü—Ä–∏–≤–µ—Ç")

    elif text == "/sex":
        e.sendMessage(chat_id,"–ò –Ω–µ–º–Ω–æ–≥–æ <i>—Å–µ–∫—Å–∞</i>")

    elif text == "/andruxa":
        e.sendMessage(chat_id, '–ï–ë–ê–¢–¨ –ê–ù–î–†–Æ–•–ê!')
        e.sendMessage(chat_id, '–ú–£–ñ–ò–ö!')
        e.sendMessage(chat_id, 'üòéüòéüòé')

    elif text == "/orlow":
        e.sendMessage(chat_id, 't.me/orlow')

    elif text == '/github':
        e.sendMessage(chat_id, '–ì–æ–ª—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ <code>—Ç–æ–ª—å–∫–æ —Å 18</code>'
                               '\nhttps://github.com/orlovw/karpikchan')

    elif text == "/ivan":
        e.sendMessage(chat_id, '<code>T S Y A R</code>')

    elif text == "/cookie":
        markup = {"inline_keyboard":
                      [[{"text": "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–µ–Ω—å–µ üç™", "callback_data": "999"}]]
            , "resize_keyboard": True}
        e.sendMessage(chat_id, "–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –ø–µ—á–µ–Ω—å–∫–∏!", reply_markup=markup)

    elif text == "/anime":
        res = e.getStickerSet('catgirlnecoco2')
        sticker_list = [i["file_id"] for i in res]
        e.sendSticker(chat_id, choice(sticker_list))

    elif text == "/linux":
        e.sendMessage(chat_id, """
{0}: –ü–æ–ª—é–±–∏–ª–∞ —è –ø–∏–Ω–≥–≤–∏–Ω–∞,
{0}: –ù–µ –≤—Å–µ–≥–æ, –∞ –ø–æ–ª–æ–≤–∏–Ω—É
{0}: - –ü–æ–ª–æ–≤–∏–Ω—É –Ω–∏–∂–Ω—é—é,
{0}: –Ø—Ä–∫—É—é, –ø–æ–¥–≤–∏–∂–Ω—É—é )
{1}: –¢–æ–∂–µ —Å –ª–∏–Ω—É–ø—Å–æ–º —Ç—Ä–∞—Ö–∞–µ—Å—Å–∏?
        """.format("<b>404_user_not_found</b>","<b>xYZ</b>"))

    else:
        e.sendMessage(chat_id,"–Ø —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é")




def callback_query_handler(query):

    print(query)

    chat_id = query['chat_id']
    data = query['data']
    message_id = query['message_id']
    callback_query_id = query["callback_query_id"]

    if data == '999':
        e.answerCallbackQuery(callback_query_id,'–ó–∞–±–∏—Ä–∞–π, –º–Ω–µ –Ω–µ –∂–∞–ª–∫–æ :3')

    elif data[:6] == 'people':
        e.editMessageText(chat_id, message_id, people_list[data], reply_markup=people_list_markup)
        e.answerCallbackQuery(callback_query_id, '–ú–µ–Ω—è—é —Å–ø–∏—Å–æ–∫ ü§ó')

    else:
        data = int(data)
        e.editMessageText(chat_id,message_id,schedule[data],reply_markup=schedule_markup)
        e.answerCallbackQuery(callback_query_id, '–ú–µ–Ω—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòΩ')

